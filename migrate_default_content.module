<?php

/**
 * Implements hook_libraries_info().
 */
function migrate_default_content_libraries_info() {
  $libraries['spyc'] = array(
    'name' => 'Spyc',
    'version' => '0.5.1',
    'vendor url' => 'https://github.com/mustangostang/spyc',
    'download url' => 'https://raw2.github.com/mustangostang/spyc/master/Spyc.php',
    'version arguments' => array(
      'file' => 'Spyc.php',
      'pattern' => '@version\s+([0-9a-zA-Z\.-]+)@',
    ),
    'files' => array(
      'php' => array('Spyc.php'),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_requirements().
 */
function migrate_default_content_requirements($phase) {
  $return = array();
  // Ensure translations don't break at install time.
  drupal_load('module', 'libraries');
  $libraries = migrate_default_content_libraries_info();
  foreach ($libraries as $name => $info) {
    $library = libraries_detect($name);
    $return[$name] = array(
      'title' => $library['name'],
      'severity' => $library['installed'] ? REQUIREMENT_OK : REQUIREMENT_WARNING,
      'value' => $library['installed'] ? l($library['version'], $library['vendor url']) : $library['error message'],
    );
  }

  return $return;
}

/**
 * Returns an array with all the configuration saved into the yaml files.
 *
 * @param string $content_path
 *  Internal path where the yaml and data files are stored.
 *
 * @return array
 */
function migrate_default_content_get_config_files($content_path = '') {
  $config = &drupal_static(__FUNCTION__, array());
  if (empty($config)) {
    libraries_load('spyc');
    if (empty($content_path)) {
      $content_path = variable_get('migrate_default_content_path', 'sites/default/files/default_content');
    }
    $files = file_scan_directory($content_path, '/^.+\.yaml/');
    foreach ($files as $file) {
      $config[] = Spyc::YAMLLoad($file->uri);
    }
  }
  return $config;
}

/**
 * Implements hook_migrate_api().
 */
function migrate_default_content_migrate_api() {
  $api = array(
    'api' => 2,
    'groups' => array(
      'migrate_default_content' => array(
        'title' => t('Migrate default content'),
      ),
    ),
  );

  return $api;
}

/**
 * Implements hook_flush_caches().
 */
function migrate_default_content_flush_caches() {
  $content_path = variable_get('migrate_default_content_path', 'sites/default/files/default_content');
  $config = migrate_default_content_get_config_files($content_path);
  // we'll use this one to check if there's an existing migrations that's not defined anymore.
  $existing_migrations = _migrate_default_content_get_migrations_by_group();
  foreach ($config as $data) {
    // remove the ones that are already defined.
    unset($existing_migrations[$data['name']]);
    Migration::registerMigration($data['class'],
      $data['name'],
      array(
        'group_name' => 'migrate_default_content',
        'source_file' => $data['data_file'],
        'source_path' => $content_path . '/data',
        'disable_hooks' => isset($data['disable_hooks']) ? $data['disable_hooks'] : array(),
      )
    );
  }
  // If there's any migration here, it's not defined anymore. We need to deregister it.
  if (!empty($existing_migrations)) {
   foreach ($existing_migrations as $name => $migration) {
    Migration::deregisterMigration($name);
   }
  }
}

/**
 * Returns all migrations for a given group.
 *
 * @param string $group: Name of the group for the migrations we want. Defaults to 'migrate_default_content'
 * @return array: All migrations for a given group.
 * @see migrate_migrations()
 */
function _migrate_default_content_get_migrations_by_group($group_name = 'migrate_default_content') {
  $migrations = migrate_migrations();
  foreach ($migrations as $name => $migration) {
    $group = $migration->getGroup();
    if ($group->getName() != $group_name) {
      // We only want migrations who belong to our group.
      unset($migrations[$name]);
    }
  }
  return $migrations;
}

/**
 * Implements hook_entity_presave.
 * Workaround for a bug when saving taxonomy_term entities:
 *  In taxonomy_term_save $term->vocabulary_machine_name is not converted to vid.
 */
function migrate_default_content_entity_presave($entity, $type) {
  if ($type == "taxonomy_term" && empty($entity->vid) && $entity->vocabulary_machine_name) {
    // loads taxonomy vocabulary and assigns its vid to the taxonomy term.
    $entity->vid = taxonomy_vocabulary_machine_name_load($entity->vocabulary_machine_name)->vid;
  }
}
