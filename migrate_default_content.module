<?php

/**
 * @file
 * Functions for the migrate_default_content module.
 */

use Symfony\Component\Yaml\Parser;

/**
 * Implements hook_migration_plugins_alter().
 *
 * Create migrations based on the csv files.
 */
function migrate_default_content_migration_plugins_alter(&$definitions) {
  $source_dir = DRUPAL_ROOT . '/' . \Drupal::config('migrate_default_content.settings')->get('source_dir');

  // First we create a structure with all the migrations because we want to know
  // which ones are available and set dependencies.
  $migration_files = [];
  if ($handle = opendir($source_dir)) {
    while (($file = readdir($handle)) !== FALSE) {
      $fileparts = explode('.', $file);
      if ($file != "." && $file != ".." && array_pop($fileparts) == 'csv') {
        $entity_type = array_shift($fileparts);
        $bundle = array_shift($fileparts);
        // Read first line of the file to get the fields to be migrated.
        $csv = fopen($source_dir . '/' . $file, 'r');
        $line = fgets($csv);
        fclose($csv);
        $migration_files['migrate_default_content_' . $entity_type . '_' . $bundle] = [
          'first_line' => $line,
          'entity_type' => $entity_type,
          'bundle' => $bundle,
        ];
      }
    }
    closedir($handle);

    foreach ($migration_files as $id => $migration) {
      $headers = explode(',', $migration['first_line']);
      // Assume the key is the first field of the csv.
      $key = trim(reset($headers));
      $migration_plugin = [
        'id' => $id,
        'migration_group' => 'migrate_default_content',
        'label' => $id,
        'class' => '\Drupal\migrate\Plugin\Migration',
        'status' => 1,
        'source' => [
          'plugin' => 'csv',
          'path' => $source_dir . '/' . $migration['entity_type'] . '.' . $migration['bundle'] . '.csv',
          'header_row_count' => 1,
          'keys' =>
          [
            0 => $key,
          ],
        ],
        'process' => [
          'type' => [
            'plugin' => 'default_value',
            'default_value' => $migration['bundle'],
          ],
        ],
        'destination' => [
          'plugin' => 'entity:' . $migration['entity_type'],
        ],
      ];
      foreach ($headers as $field) {
        // Headers can have spaces or line endings as is the case for the last
        // field.
        $field = trim($field);
        // Handle CSV header fieldSubfield e.g. "bodyFormat".
        $components = preg_split('/([A-Z])/', $field, -1, PREG_SPLIT_DELIM_CAPTURE);
        $field = array_shift($components);
        $subfield = strtolower(implode($components));

        $dest_field = empty($subfield) ? $field : $field . '/' . $subfield;

        // It needs to be a normalized process.
        // See: https://api.drupal.org/api/drupal/core!modules!migrate!src!Plugin!Migration.php/function/Migration%3A%3AgetProcessNormalized/
        $migration_plugin['process'][$dest_field] = [
          [
            // All fields by default can have multiple values.
            //'plugin' => 'explode',
            'plugin' => 'get',
            'source' => $field . ucfirst($subfield),
          ],
        ];

        // If this an entity_reference field and a migrate_default_content
        // migration exists add it automatically.
        $field_definition = \Drupal::service('entity_field.manager')->getFieldDefinitions($migration['entity_type'], $migration['bundle'])[$field];
        if ($field_definition && $field_definition->getType() === 'entity_reference') {
          $settings = $field_definition->getItemDefinition()->getSettings();
          $target_entity_type = $settings['target_type'];

          if (isset($settings['handler_settings']['target_bundles'])) {
            // Add all posible referenceable bundles.
            foreach ($settings['handler_settings']['target_bundles'] as $target_bundle) {
              $target_id = 'migrate_default_content_' . $target_entity_type . '_' . $target_bundle;
              $migration_plugin = migrate_default_content_add_target_migration($migration_files, $migration_plugin, $dest_field, $target_id);
            }
          }
          // Assume is a entity with only one bundle. e.g. user.
          else {
            $target_id = 'migrate_default_content_' . $target_entity_type . '_' . $target_entity_type;
            $migration_plugin = migrate_default_content_add_target_migration($migration_files, $migration_plugin, $dest_field, $target_id);
          }

        }
      }

      // Look for a overide yml file.
      $override_file_path = $source_dir . '/overrides/' . $migration['entity_type'] . '.' . $migration['bundle'] . '.yml';
      if (file_exists($override_file_path)) {
        $yaml = new Parser();
        $override = $yaml->parse(file_get_contents($override_file_path));
        $migration_plugin = array_merge_recursive($migration_plugin, $override);
      }
      $definitions[$id] = $migration_plugin;
    }
  }
}

/**
 * Add a migration to the process pipeline with its dependency.
 */
function migrate_default_content_add_target_migration($migrations, $migration_plugin, $dest_field, $target_id) {
  if (isset($migrations[$target_id])) {
    // We don't need a source because only the first process plugin in
    // the pipeline should have it and we already have the explode plugin.
    $migration_plugin['process'][$dest_field][] = [
      'plugin' => 'migration',
      'migration' => $target_id,
      'no_stub' => TRUE,
    ];
    $migration_plugin['migration_dependencies']['required'][] = $target_id;
  }
  return $migration_plugin;
}
